name: 'Build and push'
description: 'Build and push Docker image to GCP'
inputs:
  key:
    description: 'GCP service key base64 encoded'
    required: true
  serviceName:
    description: 'name of the service'
    required: true
  region:
    description: 'GCP region'
    required: false
    default: 'europe-west4'
  dockerfile:
    description: 'Relative path to the dockerfile; default: ./Dockerfile'
    required: false
    default: './Dockerfile'
  tag:
    description: 'Tag for the docker image; default: all'
    required: false
    default: 'all'
  sshKey:
    description: 'pass in an ssh key to the docker build'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: nf-artifact-repositories

    - name: build and push docker image
      shell: bash
      env:
        GCP_REGION: ${{ inputs.region }}
        GCP_NAME: ${{ inputs.serviceName }}
      # language=bash
      run: |
        set -e
        echo "Authenticate for docker"
        export BASE_REPO=${GCP_REGION}-docker.pkg.dev
        export CONTAINER_REPO=${BASE_REPO}/nf-artifact-repositories/${GCP_NAME}
        echo "Authenticating with Google Cloud for project nf-artifact-repositories and docker '${BASE_REPO}'"
        echo ${{ inputs.key }} | base64 --decode > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud auth configure-docker --quiet $BASE_REPO
        echo "Build and push Docker images"
        export DOCKER_BUILDKIT=1
        export IMG="${CONTAINER_REPO}/${{ inputs.tag }}:${{ github.sha }}"
        
        if ! gcloud container images describe $IMG > /dev/null 2>&1; then
          # needed to enable caching, without it we can't use cache-to and cache-from
          docker buildx create --name cacheable --driver docker-container --use
          DOCKER_BUILD_CMD="docker buildx build --tag \"${IMG}\" --push --file ${{ inputs.dockerfile }}"

          if [ "${{ inputs.sshKey }}" != "" ]; then
            echo "building docker image with ssh key"
            echo "${{ inputs.sshKey }}" > ${HOME}/.ssh_key
            DOCKER_BUILD_CMD="$DOCKER_BUILD_CMD --secret id=sshkey,src=$HOME/.ssh_key"
          fi
        
          # Execute build command
          echo "Building and pushing Docker image with command: $DOCKER_BUILD_CMD ."
          eval $DOCKER_BUILD_CMD .
        else
          echo "Image already exists: $IMG"
        fi
